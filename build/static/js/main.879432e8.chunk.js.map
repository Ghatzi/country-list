{"version":3,"sources":["graphql/Queries.js","components/Cards.js","countries.js","App.js","reportWebVitals.js","index.js"],"names":["LOAD_COUNTRIES","gql","Cards","countries","map","c","className","src","flag","svgFile","alt","name","Typography","variant","nativeName","capital","population","toLocaleString","officialLanguages","slice","l","_id","Box","mt","Link","href","title","GetCountries","data","useQuery","useState","setCountries","isLoading","setIsLoading","useEffect","Country","console","log","display","flexWrap","justifyContent","errorLink","onError","graphQLErrors","networkError","message","locations","path","link","from","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","App","Container","textAlign","m","Avatar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6fAEO,IAAMA,EAAiBC,cAAH,K,2BC6BZC,EA7BD,SAAC,GAAD,SAAGC,UACLC,KAAI,SAAAC,GAAC,OACb,sBAAKC,UAAU,YAAf,UACE,qBAAKC,IAAKF,EAAEG,KAAKC,QAASC,IAAKL,EAAEM,OACjC,eAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,UACGR,EAAEM,KADL,KACY,4BAAIN,EAAES,gBAElB,eAACF,EAAA,EAAD,CAAYC,QAAQ,QAApB,sBAAsCR,EAAEU,WACxC,eAACH,EAAA,EAAD,CAAYC,QAAQ,QAApB,yBACeR,EAAEW,WAAWC,oBAE5B,eAACL,EAAA,EAAD,CAAYC,QAAQ,QAApB,8BACoB,IAClB,6BACGR,EAAEa,kBAAkBC,MAAM,EAAG,GAAGf,KAAI,SAAAgB,GAAC,OACpC,6BAAiBA,EAAET,MAAVS,EAAEC,aAIjB,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,cAACC,EAAA,EAAD,CAAMC,KAAK,IAAIC,MAAM,YAArB,SACE,eAACd,EAAA,EAAD,CAAYC,QAAQ,QAApB,6BACmBR,EAAEM,KADrB,mBAnB0BN,EAAEgB,SC0BvBM,EAvBM,WAAO,IAClBC,EAASC,mBAAS7B,GAAlB4B,KADiB,EAESE,mBAAS,IAFlB,mBAElB3B,EAFkB,KAEP4B,EAFO,OAGSD,oBAAS,GAHlB,mBAGlBE,EAHkB,KAGPC,EAHO,KAazB,OARAC,qBAAU,WACJN,IACFK,GAAa,GACbF,EAAaH,EAAKO,SAClBC,QAAQC,IAAIT,EAAKO,YAElB,CAACP,IAGF,qCACGI,GAAa,cAACpB,EAAA,EAAD,CAAYC,QAAQ,KAApB,wBACd,cAACS,EAAA,EAAD,CAAKgB,QAAQ,OAAOC,SAAS,OAAOC,eAAe,SAAnD,SACE,cAAC,EAAD,CAAOrC,UAAWA,U,kBCXpBsC,G,MAAYC,aAAQ,YAAsC,IAAnCC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aACtCD,GACFA,EAAcvC,KAAI,gBAAGyC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAWC,EAAvB,EAAuBA,KAAvB,OAChBX,QAAQC,IAAR,oCAC+BQ,EAD/B,uBACqDC,EADrD,mBACyEC,OAIzEH,GAAcR,QAAQC,IAAR,2BAAgCO,QAG9CI,EAAOC,eAAK,CAChBR,EACA,IAAIS,WAAS,CAAEC,IAAK,iDAGhBC,EAAS,IAAIC,eAAa,CAC9BC,MAAO,IAAIC,gBACXP,KAAMA,IAkBOQ,MAff,WACE,OACE,cAAC,iBAAD,CAAgBJ,OAAQA,EAAxB,SACE,eAACK,EAAA,EAAD,WACE,eAACnC,EAAA,EAAD,CAAKoC,UAAU,SAASC,EAAG,EAA3B,UACE,cAACC,EAAA,EAAD,CAAQlD,IAAI,eAAeH,IAAI,WAAWD,UAAU,SACpD,cAACM,EAAA,EAAD,CAAYC,QAAQ,KAApB,6BACA,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,gCAEF,cAAC,EAAD,UC/BOgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.879432e8.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const LOAD_COUNTRIES = gql`\r\n  query {\r\n    Country {\r\n      _id\r\n      name\r\n      capital\r\n      nativeName\r\n      population\r\n      flag {\r\n        svgFile\r\n      }\r\n      officialLanguages {\r\n        _id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { Typography, Link, Box } from '@material-ui/core';\r\n\r\nconst Cards = ({ countries }) =>\r\n  countries.map(c => (\r\n    <div className=\"card-list\" key={c._id}>\r\n      <img src={c.flag.svgFile} alt={c.name} />\r\n      <Typography variant=\"h5\">\r\n        {c.name}, <i>{c.nativeName}</i>\r\n      </Typography>\r\n      <Typography variant=\"body1\">Capital: {c.capital}</Typography>\r\n      <Typography variant=\"body1\">\r\n        Population: {c.population.toLocaleString()}\r\n      </Typography>\r\n      <Typography variant=\"body1\">\r\n        Spoken Languages:{' '}\r\n        <ul>\r\n          {c.officialLanguages.slice(0, 5).map(l => (\r\n            <li key={l._id}>{l.name}</li>\r\n          ))}\r\n        </ul>\r\n      </Typography>\r\n      <Box mt={2}>\r\n        <Link href=\"/\" title=\"read more\">\r\n          <Typography variant=\"body2\">\r\n            Read more about {c.name} &rarr;\r\n          </Typography>\r\n        </Link>\r\n      </Box>\r\n    </div>\r\n  ));\r\n\r\nexport default Cards;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { LOAD_COUNTRIES } from './graphql/Queries';\r\nimport Cards from './components/Cards';\r\n\r\nimport { Box, Typography } from '@material-ui/core';\r\n\r\nconst GetCountries = () => {\r\n  const { data } = useQuery(LOAD_COUNTRIES);\r\n  const [countries, setCountries] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setIsLoading(false);\r\n      setCountries(data.Country);\r\n      console.log(data.Country);\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Typography variant=\"h5\">Loading...</Typography>}\r\n      <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"center\">\r\n        <Cards countries={countries} />\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GetCountries;\r\n","import {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  from\n} from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport GetCountries from './countries';\n\nimport { Box, Container, Avatar, Typography } from '@material-ui/core';\nimport './App.css';\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst link = from([\n  errorLink,\n  new HttpLink({ uri: 'https://countries-274616.ew.r.appspot.com/' })\n]);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Container>\n        <Box textAlign=\"center\" m={2}>\n          <Avatar alt=\"George Hatzi\" src=\"logo.jpg\" className=\"logo\" />\n          <Typography variant=\"h3\">Country Details</Typography>\n          <Typography variant=\"body1\">by George Hatzi</Typography>\n        </Box>\n        <GetCountries />\n      </Container>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}